Vioalation of 11 -> 6:

MATCH (o:Order) WHERE o.shipName = 'Alfreds Futterkiste' SET o.shipName = "Alfred's Futterkiste"

--------------

Validation of eFD 11 -> 1,6,7,8,9,14

MATCH (o:Order) WHERE
EXISTS(o.customerID) AND
EXISTS(o.shipCity) AND
EXISTS(o.shipName) AND
EXISTS(o.shipPostalCode) AND
EXISTS(o.shipCountry) AND
EXISTS(o.shipAddress) AND
EXISTS(o.shipRegion)
RETURN o.customerID, COUNT(DISTINCT(o.shipCity)),COUNT(DISTINCT(o.shipName)),COUNT(DISTINCT(o.shipPostalCode)),COUNT(DISTINCT(o.shipCountry)), COUNT(DISTINCT(o.shipAddress)),COUNT(DISTINCT(o.shipRegion))


Alternative query to verify eFD

MATCH (o:Order) WHERE
EXISTS(o.customerID) AND
EXISTS(o.shipCity) AND
EXISTS(o.shipName) AND
EXISTS(o.shipPostalCode) AND
EXISTS(o.shipCountry) AND
EXISTS(o.shipAddress) AND
EXISTS(o.shipRegion)
WITH o.customerID AS ids, COUNT(DISTINCT(o.shipCity)) AS dist1, COUNT(DISTINCT(o.shipName)) AS dist2, COUNT(DISTINCT(o.shipPostalCode)) AS dist3, COUNT(DISTINCT(o.shipCountry)) AS dist4, COUNT(DISTINCT(o.shipAddress)) AS dist5, COUNT(DISTINCT(o.shipRegion)) AS dist6
WHERE dist1 > 1 OR dist2 > 2 OR dist3 > 1 OR dist4 > 1 OR dist5 > 1 OR dist6 > 1 
RETURN ids, dist1, dist2, dist3, dist4, dist5, dist6



---------------

Updating customer vertices and remove properties from order vertices (instead of creating new shippingLocations)


MATCH (o:Order),(c:Customer) WHERE
EXISTS(c.customerID) AND
EXISTS(o.customerID) AND
(o.customerID = c.customerID) AND
EXISTS(o.shipCity) AND
EXISTS(o.shipName) AND
EXISTS(o.shipPostalCode) AND
EXISTS(o.shipCountry) AND
EXISTS(o.shipAddress) AND
EXISTS(o.shipRegion)
SET c.shipCity = o.shipCity
REMOVE o.shipCity
SET c.shipName = o.shipName
REMOVE o.shipName
SET c.shipPostalCode = o.shipPostalCode
REMOVE o.shipPostalCode
SET c.shipCountry = o.shipCountry
REMOVE o.shipCountry
SET c.shipAddress = o.shipAddress
REMOVE o.shipAddress
SET c.shipRegion = o.shipRegion
REMOVE o.shipRegion


---------------


Remove customerID in orders (as no foreign key required)

MATCH (o:Order) REMOVE o.customerID

----------------
----------------


Aggregate query denormalised


MATCH (o:Order)
WITH o.customerID AS orders, COUNT(*) AS amount
RETURN min(amount), max(amount), avg(amount)



----------------


Aggregate query normalised


MATCH (c:Customer)
WITH SIZE([(c)--(o:Order) | o]) AS amount
RETURN min(amount), max(amount), avg(amount)


----------------

Update (max) denormalised


MATCH (o:Order)
WHERE o.customerID = 'SAVEA'
SET o.shipCountry = 'United States'



----------------

Update (max) normalised


MATCH (c:Customer)
WHERE c.customerID = 'SAVEA'
SET c.shipCountry = 'United States'



----------------

Update (avg) denormalised (9 orders)


MATCH (o:Order)
WHERE o.customerID = 'SEVES'
SET o.shipCountry = 'United Kingdom'


----------------

Update (avg) normalised (9 orders)


MATCH (c:Customer)
WHERE c.customerID = 'SEVES'
SET c.shipCountry = 'United Kingdom'


----------------

Update (min) denormalised (1 orders)


MATCH (o:Order)
WHERE o.customerID = 'CENTC'
SET o.shipCountry = 'Estados Unidos Mexicanos'

----------------

Update (min) normalised (1 orders)


MATCH (c:Customer)
WHERE c.customerID = 'CENTC'
SET c.shipCountry = 'Estados Unidos Mexicanos'



----------------

Validation of eUC


MATCH (c:Customer) WHERE
EXISTS(c.customerID) AND
EXISTS(c.shipCity) AND
EXISTS(c.shipName) AND
EXISTS(c.shipPostalCode) AND
EXISTS(c.shipCountry) AND
EXISTS(c.shipAddress) AND
EXISTS(c.shipRegion)
RETURN c.customerID, COUNT(c)







----------------------------------
Count redundancy

MATCH (o:Order) WHERE
EXISTS(o.customerID) AND
EXISTS(o.shipCity) AND
EXISTS(o.shipName) AND
EXISTS(o.shipPostalCode) AND
EXISTS(o.shipCountry) AND
EXISTS(o.shipAddress) AND
EXISTS(o.shipRegion)
WITH o.customerID AS ids, COUNT(o.shipCity) AS dist1, COUNT(o.shipName) AS dist2, COUNT(o.shipPostalCode) AS dist3, COUNT(o.shipCountry) AS dist4, COUNT(o.shipAddress) AS dist5, COUNT(o.shipRegion) AS dist6
WHERE dist1 > 1 OR dist2 > 2 OR dist3 > 1 OR dist4 > 1 OR dist5 > 1 OR dist6 > 1 
RETURN SUM(dist1)